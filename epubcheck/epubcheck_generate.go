// +build novnc_generate,!novalidate,!nacl

package main

import (
	"archive/zip"
	"bytes"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"path"
)

const downloadURL = "https://github.com/w3c/epubcheck/releases/download/v4.2.0/epubcheck-4.2.0.zip"
const epubCheckName = "epubcheck-4.2.0/epubcheck.jar"

func main() {
	fmt.Println("Downloading", downloadURL)
	resp, err := http.Get(downloadURL)
	if err != nil {
		panic(err)
	}

	buf, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		panic(err)
	}

	fmt.Println("Checking", path.Base(downloadURL))
	zr, err := zip.NewReader(bytes.NewReader(buf), int64(len(buf)))
	if err != nil {
		panic(err)
	}

	var epubCheckFound bool
	for _, f := range zr.File {
		if f.Name == epubCheckName {
			epubCheckFound = true
			break
		}
	}

	if !epubCheckFound {
		panic("could not find " + epubCheckName)
	}

	fmt.Println("Generating epubcheck_generated.go")
	f, err := os.Create("epubcheck_generated.go")
	if err != nil {
		panic(err)
	}

	fmt.Fprintf(f, "// Code generated by epubcheck_generate.go; DO NOT EDIT.\n\npackage epubcheck\n\nconst epubcheckJar = %#v\n\nvar epubcheck = %#v\n", epubCheckName, buf)

	f.Close()
}
